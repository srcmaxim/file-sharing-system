buildscript {
	ext {
		springBootVersion = '1.5.6.RELEASE'
		springCoreVersion = '4.3.9.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

version = '0.0.5-SHAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-thymeleaf')
	compile('org.springframework.boot:spring-boot-starter-mail')
	compile('org.thymeleaf.extras:thymeleaf-extras-springsecurity4')
	compile('mysql:mysql-connector-java')
	compileOnly('org.projectlombok:lombok')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.security:spring-security-test')
}

configurations {
	itestCompile.extendsFrom testCompile
	itestRuntime.extendsFrom testRuntime
}

sourceSets {
	itest {
		compileClasspath += main.output + test.output
		runtimeClasspath += main.output + test.output
		java.srcDir file('src/itest/java')
	}
	// This is just to trick IntelliJ IDEA to add integration test
	// resources to classpath when running integration tests from
	// the IDE. It's is not a good solution but I don't know about
	// a better one.
	test {
		resources.srcDir file('src/itest/resources')
	}
}

task itest(type: Test) {
	testClassesDir = sourceSets.itest.output.classesDir
	classpath = sourceSets.itest.runtimeClasspath
	environment SPRING_PROFILES_ACTIVE: "test"
	testLogging {
		events "passed", "skipped", "failed"
	}
}

test {
	testLogging {
		events "passed", "skipped", "failed"
	}
}